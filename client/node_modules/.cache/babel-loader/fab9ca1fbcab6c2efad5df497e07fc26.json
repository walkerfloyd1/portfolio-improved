{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Resource = require('./resource');\n/**\n * Model to represent an user.\n * @type {Resource}\n */\n\n\nvar User = function (_Resource) {\n  _inherits(User, _Resource);\n\n  function User(client, github, id) {\n    _classCallCheck(this, User);\n\n    var _this = _possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this, client));\n\n    _this.id = id;\n    return _this;\n  }\n  /**\n   * Return API endpoint for this user\n   */\n\n\n  _createClass(User, [{\n    key: 'url',\n    value: function url() {\n      var _get2;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(User.prototype.__proto__ || Object.getPrototypeOf(User.prototype), 'url', this)).call.apply(_get2, [this, this.id ? 'users/' + this.id : 'user'].concat(args));\n    } // Get a single user\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.get('').get('body');\n    } // Edit authenticated user\n\n  }, {\n    key: 'edit',\n    value: function edit(params) {\n      return this.patch('', params).get('body');\n    }\n    /**\n     * List repositories for this user.\n     * https://developer.github.com/v3/repos/#list-your-repositories\n     *\n     * @param  {Object} options\n     * @return {Promise<Page>}\n     */\n\n  }, {\n    key: 'repos',\n    value: function repos(options) {\n      return this.page('repos', {}, options);\n    }\n    /**\n     * List organizations for this user.\n     * https://developer.github.com/v3/orgs/#list-your-organizations\n     *\n     * @param  {Object} options\n     * @return {Promise<Page>}\n     */\n\n  }, {\n    key: 'orgs',\n    value: function orgs(options) {\n      return this.page('orgs', {}, options);\n    } // Create a new repository\n    // https://developer.github.com/v3/repos/#create\n\n  }, {\n    key: 'createRepo',\n    value: function createRepo(info) {\n      return this.post('repos', info).get('body');\n    } // Add email address(es)\n    // https://developer.github.com/v3/users/emails/#add-email-addresses\n\n  }, {\n    key: 'addUserEmails',\n    value: function addUserEmails(emails) {\n      return this.post('emails', emails).get('body');\n    } // Delete email address(es)\n    // https://developer.github.com/v3/users/emails/#delete-email-addresses\n\n  }, {\n    key: 'deleteUserEmails',\n    value: function deleteUserEmails(emails) {\n      return this.del('emails', emails).get('body');\n    } // Check a membership\n    // https://developer.github.com/v3/orgs/members/#get-your-organization-membership\n\n  }, {\n    key: 'getOrgMembership',\n    value: function getOrgMembership(org) {\n      return this.get('memberships/orgs/' + org).get('body');\n    } // List current user's memberships to all of his organizations\n    // https://developer.github.com/v3/orgs/members/#list-your-organization-memberships\n\n  }, {\n    key: 'getOrgsMemberships',\n    value: function getOrgsMemberships(params, options) {\n      return this.page('memberships/orgs', params, options);\n    }\n  }]);\n\n  return User;\n}(Resource);\n\nmodule.exports = User;","map":null,"metadata":{},"sourceType":"script"}