{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar deprecate = require('deprecate');\n\nvar Resource = require('./resources/resource');\n\nvar Repository = require('./resources/repository');\n\nvar User = require('./resources/user');\n\nvar Organization = require('./resources/organization');\n\nvar Application = require('./resources/application');\n\nvar Installation = require('./resources/installation');\n\nvar APIClient = require('./client');\n\nvar GitHub = function (_Resource) {\n  _inherits(GitHub, _Resource);\n\n  function GitHub(options) {\n    _classCallCheck(this, GitHub);\n\n    return _possibleConstructorReturn(this, (GitHub.__proto__ || Object.getPrototypeOf(GitHub)).call(this, new APIClient(options)));\n  }\n  /**\n   * Resources\n   */\n\n\n  _createClass(GitHub, [{\n    key: 'me',\n    value: function me() {\n      return this.resource(User);\n    }\n  }, {\n    key: 'repo',\n    value: function repo(id) {\n      return this.resource(Repository, id);\n    }\n  }, {\n    key: 'user',\n    value: function user(id) {\n      return this.resource(User, id);\n    }\n  }, {\n    key: 'org',\n    value: function org(id) {\n      return this.resource(Organization, id);\n    }\n  }, {\n    key: 'app',\n    value: function app(id) {\n      return this.resource(Application, id);\n    }\n  }, {\n    key: 'installation',\n    value: function installation() {\n      return this.resource(Installation);\n    }\n    /**\n     * Return API limits\n     * @return {Promise<Number>}\n     */\n\n  }, {\n    key: 'limit',\n    value: function limit() {\n      return this.get('/rate_limit').get('body').get('rate');\n    }\n    /**\n     * List all public repositories.\n     * https://developer.github.com/v3/repos/\n     *\n     * @param  {Object} options\n     * @return {Promise<Page>}\n     */\n\n  }, {\n    key: 'repos',\n    value: function repos(options) {\n      return this.page('repositories', {}, options);\n    } // Create a new repository\n    // https://developer.github.com/v3/repos/#create\n\n  }, {\n    key: 'createRepo',\n    value: function createRepo(info) {\n      deprecate('\"github.addUserEmails\" is deprecated, use \"github.me().createRepo()\"');\n      return this.post('/user/repos', info).get('body');\n    } // Add email address(es)\n    // https://developer.github.com/v3/users/emails/#add-email-addresses\n\n  }, {\n    key: 'addUserEmails',\n    value: function addUserEmails(emails) {\n      deprecate('\"github.addUserEmails\" is deprecated, use \"github.me().addEmails()\"');\n      return this.post('/user/emails', emails).get('body');\n    } // Delete email address(es)\n    // https://developer.github.com/v3/users/emails/#delete-email-addresses\n\n  }, {\n    key: 'deleteUserEmails',\n    value: function deleteUserEmails(emails) {\n      deprecate('\"github.deleteUserEmails\" is deprecated, use \"github.me().deleteEmails()\"');\n      return this.del('/user/emails', emails).get('body');\n    }\n  }]);\n\n  return GitHub;\n}(Resource);\n\nmodule.exports = GitHub;","map":null,"metadata":{},"sourceType":"script"}