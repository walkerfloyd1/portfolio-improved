{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_PROFILE, PROFILE_ERROR, UPDATE_PROFILE, GET_REPOS, CLEAR_PROFILE, ACCOUNT_DELETED, GET_PROFILES } from './types'; //This is a function to get the current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/profile/me');\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const getProfiles = () => async dispatch => {\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n\n  try {\n    const res = await axios.get('/api/profile');\n    dispatch({\n      type: GET_PROFILES,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const getGithubRepos = () => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/github/walkerfloyd1\");\n    dispatch({\n      type: GET_REPOS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const getProfileById = userId => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/profile/user/\".concat(userId));\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //Action to create or update a profile\n\nexport const createProfile = (formData, history, edit = false) => async dispatch => {\n  try {\n    const config = {\n      header: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const res = await axios.post('/api/profile', formData, config);\n    dispatch({\n      type: GET_PROFILE,\n      payload: res.data\n    });\n    dispatch(setAlert(edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n    if (!edit) {\n      history.push('/my-profile');\n    }\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: PROFILE_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; // Delete account and Profile\n\nexport const deleteAccount = () => async dispatch => {\n  if (window.confirm('Are you sure you want to delete your account?')) {\n    try {\n      const res = await axios.delete('/api/profile');\n      dispatch({\n        type: CLEAR_PROFILE\n      });\n      dispatch({\n        type: ACCOUNT_DELETED\n      });\n      dispatch(setAlert('Account Permanently Removed'));\n    } catch (error) {\n      dispatch({\n        type: PROFILE_ERROR,\n        payload: {\n          msg: error.response.statusText,\n          status: error.response.status\n        }\n      });\n    }\n  }\n};","map":{"version":3,"sources":["/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/src/Components/social/redux/profile.js"],"names":["axios","setAlert","GET_PROFILE","PROFILE_ERROR","UPDATE_PROFILE","GET_REPOS","CLEAR_PROFILE","ACCOUNT_DELETED","GET_PROFILES","getCurrentProfile","dispatch","res","get","type","payload","data","error","msg","response","statusText","status","getProfiles","getGithubRepos","getProfileById","userId","createProfile","formData","history","edit","config","header","post","push","errors","forEach","deleteAccount","window","confirm","delete"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\n\n\nimport {\n    GET_PROFILE,\n    PROFILE_ERROR,\n    UPDATE_PROFILE,\n    GET_REPOS,\n    CLEAR_PROFILE,\n    ACCOUNT_DELETED,\n    GET_PROFILES,\n} from './types';\n\n//This is a function to get the current users profile\n\nexport const getCurrentProfile = () => async dispatch => {\n    try {\n       const res = await axios.get('/api/profile/me');\n       \n       dispatch({\n           type: GET_PROFILE,\n           payload: res.data\n       });\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\nexport const getProfiles = () => async dispatch => {\n    dispatch({\n        type: CLEAR_PROFILE\n    });\n    try {\n       const res = await axios.get('/api/profile');\n       \n       dispatch({\n           type: GET_PROFILES,\n           payload: res.data\n       });\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\nexport const getGithubRepos = () => async dispatch => {\n    \n    try {\n       const res = await axios.get(`/api/profile/github/walkerfloyd1`);\n       \n       dispatch({\n           type: GET_REPOS,\n           payload: res.data\n       });\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\nexport const getProfileById = userId => async dispatch => {\n    \n    try {\n       const res = await axios.get(`/api/profile/user/${userId}`);\n       \n       dispatch({\n           type: GET_PROFILE,\n           payload: res.data\n       });\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//Action to create or update a profile\n\nexport const createProfile = (\n    formData, \n    history, \n    edit = false) => async dispatch => {\n        try {\n            const config = {\n                header: {\n                    'Content-Type': 'application/json'\n                }\n            }\n\n            const res = await axios.post('/api/profile', formData, config);\n\n            dispatch({\n                type: GET_PROFILE,\n                payload: res.data\n            });\n\n            dispatch(setAlert( edit ? 'Profile Updated' : 'Profile Created', 'success'));\n\n            if (!edit) {\n                history.push('/my-profile');\n            }\n        } catch (error) {\n\n            const errors = error.response.data.errors;\n\n            if (errors) {\n                errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n            }\n            dispatch({\n                type: PROFILE_ERROR,\n                payload: { msg: error.response.statusText,\n                status: error.response.status }\n            })\n            \n        }\n    }\n\n// Delete account and Profile\nexport const deleteAccount = () => async dispatch => {\n    if(window.confirm('Are you sure you want to delete your account?')) {\n\n    try {\n        const res = await axios.delete('/api/profile');\n\n        dispatch({\n            type: CLEAR_PROFILE,\n        });\n\n        dispatch({\n            type: ACCOUNT_DELETED,\n        });\n\n        dispatch(setAlert('Account Permanently Removed'))\n    } catch (error) {\n        dispatch({\n            type: PROFILE_ERROR,\n            payload: { msg: error.response.statusText, status: error.response.status}\n        });\n    }\n}\n};\n"]},"metadata":{},"sourceType":"module"}