{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar joinURL = require('url-join');\n\nvar Page = require('../page');\n/**\n * Resource from the API.\n * @type {Class}\n */\n\n\nvar Resource = function () {\n  function Resource(client) {\n    _classCallCheck(this, Resource);\n\n    this.client = client;\n\n    if (!client) {\n      throw new Error('Resource should create with a client as first argument');\n    }\n  }\n  /**\n   * Create an url.\n   * @return {String}\n   */\n\n\n  _createClass(Resource, [{\n    key: 'url',\n    value: function url() {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      args = args.filter(function (arg) {\n        return Boolean(arg);\n      });\n      return joinURL.apply(undefined, _toConsumableArray(args));\n    }\n    /**\n     * HTTP methods\n     */\n\n  }, {\n    key: 'get',\n    value: function get(uri, params, opts) {\n      return this.client.get(this.url(uri), params, opts);\n    }\n  }, {\n    key: 'post',\n    value: function post(uri, params, opts) {\n      return this.client.post(this.url(uri), params, opts);\n    }\n  }, {\n    key: 'patch',\n    value: function patch(uri, params, opts) {\n      return this.client.patch(this.url(uri), params, opts);\n    }\n  }, {\n    key: 'del',\n    value: function del(uri, params, opts) {\n      return this.client.del(this.url(uri), params, opts);\n    }\n  }, {\n    key: 'put',\n    value: function put(uri, params, opts) {\n      return this.client.put(this.url(uri), params, opts);\n    }\n    /**\n     * Create a subresource for this resource.\n     * @param {ResourceClass} Type\n     * @param {Mixed} ...args\n     * @return {Resource}\n     */\n\n  }, {\n    key: 'resource',\n    value: function resource(Type) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      return new (Function.prototype.bind.apply(Type, [null].concat([this.client, this], args)))();\n    }\n    /**\n     * Return a pagination (already fetched).\n     *\n     * @param  {String} uri\n     * @param  {Object} params\n     * @param  {Object} options\n     * @return {Promise<Page>}\n     */\n\n  }, {\n    key: 'page',\n    value: function page(uri, params, options) {\n      var page = new Page(this.client, this.url(uri), params, options);\n      return page.fetch();\n    }\n  }]);\n\n  return Resource;\n}();\n\nmodule.exports = Resource;","map":null,"metadata":{},"sourceType":"script"}