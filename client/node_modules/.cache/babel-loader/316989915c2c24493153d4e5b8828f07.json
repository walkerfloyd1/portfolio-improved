{"ast":null,"code":"import _objectSpread from \"/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from '../redux/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {}\n};\nexport default function (state = initialState, action) {\n  const type = action.type,\n        payload = action.payload;\n\n  switch (type) {\n    case GET_POSTS:\n      return _objectSpread({}, state, {\n        posts: payload,\n        loading: false\n      });\n\n    case GET_POST:\n      return _objectSpread({}, state, {\n        post: payload,\n        loading: false\n      });\n\n    case ADD_POST:\n      return _objectSpread({}, state, {\n        posts: [payload, ...state.posts],\n        loading: false\n      });\n\n    case DELETE_POST:\n      return _objectSpread({}, state, {\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      });\n\n    case POST_ERROR:\n      return _objectSpread({}, state, {\n        error: payload,\n        loading: false\n      });\n\n    case UPDATE_LIKES:\n      return _objectSpread({}, state, {\n        posts: state.posts.map(post => post._id === payload.id ? _objectSpread({}, post, {\n          likes: payload.likes\n        }) : post),\n        loading: false\n      });\n\n    case ADD_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: payload\n        }),\n        loading: false\n      });\n\n    case REMOVE_COMMENT:\n      return _objectSpread({}, state, {\n        post: _objectSpread({}, state.post, {\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        }),\n        loading: false\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/src/Components/social/reducers/postReducer.js"],"names":["GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","initialState","posts","post","loading","error","state","action","type","payload","filter","_id","map","id","likes","comments","comment"],"mappings":";AAAA,SACIA,SADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,QALJ,EAMIC,QANJ,EAOIC,WAPJ,EAQIC,cARJ,QASO,gBATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAArB;AAOA,eAAe,UAASC,KAAK,GAAGL,YAAjB,EAA+BM,MAA/B,EAAuC;AAAA,QAC1CC,IAD0C,GACxBD,MADwB,CAC1CC,IAD0C;AAAA,QACpCC,OADoC,GACxBF,MADwB,CACpCE,OADoC;;AAGlD,UAAOD,IAAP;AACI,SAAKf,SAAL;AACI,+BACOa,KADP;AAEIJ,QAAAA,KAAK,EAAEO,OAFX;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKN,QAAL;AACI,+BACOQ,KADP;AAEIH,QAAAA,IAAI,EAAEM,OAFV;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKP,QAAL;AACI,+BACOS,KADP;AAEIJ,QAAAA,KAAK,EAAE,CAACO,OAAD,EAAU,GAAGH,KAAK,CAACJ,KAAnB,CAFX;AAGIE,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKR,WAAL;AACI,+BACOU,KADP;AAEIJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYQ,MAAZ,CAAmBP,IAAI,IAAIA,IAAI,CAACQ,GAAL,KAAaF,OAAxC,CAFX;AAGIL,QAAAA,OAAO,EAAE;AAHb;;AAKJ,SAAKV,UAAL;AACK,+BACMY,KADN;AAEGD,QAAAA,KAAK,EAAEI,OAFV;AAGGL,QAAAA,OAAO,EAAE;AAHZ;;AAKL,SAAKT,YAAL;AACI,+BACOW,KADP;AAEIJ,QAAAA,KAAK,EAAEI,KAAK,CAACJ,KAAN,CAAYU,GAAZ,CAAgBT,IAAI,IACvBA,IAAI,CAACQ,GAAL,KAAaF,OAAO,CAACI,EAArB,qBACGV,IADH;AAEAW,UAAAA,KAAK,EAAEL,OAAO,CAACK;AAFf,aAGAX,IAJG,CAFX;AAOIC,QAAAA,OAAO,EAAE;AAPb;;AASJ,SAAKL,WAAL;AACI,+BACOO,KADP;AAEIH,QAAAA,IAAI,oBAAOG,KAAK,CAACH,IAAb;AACAY,UAAAA,QAAQ,EAAEN;AADV,UAFR;AAKIL,QAAAA,OAAO,EAAE;AALb;;AAOJ,SAAKJ,cAAL;AACI,+BACOM,KADP;AAEIH,QAAAA,IAAI,oBACGG,KAAK,CAACH,IADT;AAEAY,UAAAA,QAAQ,EAAET,KAAK,CAACH,IAAN,CAAWY,QAAX,CAAoBL,MAApB,CAA2BM,OAAO,IAAIA,OAAO,CAACL,GAAR,KAAgBF,OAAtD;AAFV,UAFR;AAMIL,QAAAA,OAAO,EAAE;AANb;;AAQJ;AACI,aAAOE,KAAP;AA3DR;AA8DH","sourcesContent":["import {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n} from '../redux/types';\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {}\n}\n\nexport default function(state = initialState, action) {\n    const { type, payload } = action;\n\n    switch(type) {\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false\n            };\n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false\n            }\n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        case POST_ERROR:\n             return {\n                ...state,\n                error: payload,\n                loading: false\n            };\n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => \n                    post._id === payload.id ? {\n                    ...post,\n                    likes: payload.likes\n                } : post),\n                loading: false\n            }\n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post,\n                    comments: payload\n                },\n                loading: false\n            }\n        case REMOVE_COMMENT:\n            return {\n                ...state,\n                post: {\n                    ...state.post,\n                    comments: state.post.comments.filter(comment => comment._id !== payload ) \n                },\n                loading: false\n            }\n        default:\n            return state\n\n    }\n}"]},"metadata":{},"sourceType":"module"}