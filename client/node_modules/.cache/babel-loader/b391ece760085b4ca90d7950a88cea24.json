{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar is = require('is');\n/**\n * API error object.\n * @type {Class}\n */\n\n\nvar GitHubError = function (_Error) {\n  _inherits(GitHubError, _Error);\n\n  function GitHubError(message) {\n    _classCallCheck(this, GitHubError);\n\n    var _this = _possibleConstructorReturn(this, (GitHubError.__proto__ || Object.getPrototypeOf(GitHubError)).call(this, message));\n\n    _this.name = 'GitHubError';\n    _this.message = message;\n    _this.statusCode = 0;\n    _this.code = 0;\n    _this.statusType = '0xx';\n    _this.response = null;\n\n    if (typeof Error.captureStackTrace === 'function') {\n      Error.captureStackTrace(_this, _this.constructor);\n    } else {\n      _this.stack = new Error(message).stack;\n    }\n\n    return _this;\n  }\n  /**\n   * Create an error object for a fetch response.\n   * @param  {Response} response\n   * @return {GitHubError} error\n   */\n\n\n  _createClass(GitHubError, null, [{\n    key: 'createForResponse',\n    value: function createForResponse(opts) {\n      var message = 'Error ' + opts.statusCode;\n      var errors = void 0,\n          documentationUrl = void 0;\n\n      if (is.object(opts.body) && opts.body.message) {\n        message = opts.body.message || opts.message;\n      }\n\n      var err = new GitHubError(message);\n      Object.defineProperty(err, 'response', {\n        value: opts.response,\n        enumerable: false\n      });\n      err.statusCode = opts.statusCode;\n      err.code = err.statusCode;\n      err.statusType = opts.statusType;\n      err.body = opts.body;\n      err.headers = opts.headers;\n      err.documentationUrl = documentationUrl;\n      err.errors = errors || [];\n      return err;\n    }\n  }]);\n\n  return GitHubError;\n}(Error);\n\nmodule.exports = GitHubError;","map":null,"metadata":{},"sourceType":"script"}