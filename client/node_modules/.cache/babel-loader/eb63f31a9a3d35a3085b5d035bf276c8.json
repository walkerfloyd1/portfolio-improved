{"ast":null,"code":"const Transform = require('stream').Transform || require('readable-stream/transform'),\n      inherits = require('util').inherits,\n      xtend = require('xtend');\n\nfunction noop(chunk, enc, callback) {\n  callback(null, chunk);\n}\n\nfunction ctor(options, transform, flush) {\n  if (typeof options == 'function') {\n    flush = transform;\n    transform = options;\n    options = {};\n  }\n\n  if (typeof transform != 'function') transform = noop;\n\n  function Through2(override) {\n    if (!(this instanceof Through2)) return new Through2(override);\n    this.options = xtend(options, override);\n    Transform.call(this, this.options);\n  }\n\n  inherits(Through2, Transform);\n  Through2.prototype._transform = transform;\n  if (typeof flush == 'function') Through2.prototype._flush = flush;\n  return Through2;\n}\n\nfunction make(options, transform, flush) {\n  return ctor(options, transform, flush)();\n}\n\nmodule.exports = make;\nmodule.exports.ctor = ctor;","map":null,"metadata":{},"sourceType":"script"}