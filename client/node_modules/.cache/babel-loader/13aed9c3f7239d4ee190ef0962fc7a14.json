{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Promise = require('q');\n\nvar is = require('is');\n\nvar _url = require('url');\n\nvar querystring = require('querystring');\n\nvar base64 = require('js-base64').Base64;\n\nvar _request = require('request');\n\nvar isAbsoluteUrl = require('is-absolute-url');\n\nvar joinURL = require('url-join');\n\nvar GitHubError = require('./error');\n/**\n * Client for the GitHub API.\n * @type {Class}\n */\n\n\nvar APIClient = function () {\n  function APIClient() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, APIClient);\n\n    this.opts = _extends({\n      // Endpoint for the API\n      endpoint: 'https://api.github.com',\n      // User-Agent to use for requests\n      userAgent: 'octocat.js',\n      // Access token\n      token: null,\n      // Basic auth\n      username: null,\n      password: null,\n      // Custom request\n      request: {}\n    }, opts);\n  }\n  /**\n   * Return the value for the authentication header.\n   * @return {String}\n   */\n\n\n  _createClass(APIClient, [{\n    key: 'getAuthorizationHeader',\n    value: function getAuthorizationHeader() {\n      var _opts = this.opts,\n          token = _opts.token,\n          username = _opts.username,\n          password = _opts.password;\n\n      if (token) {\n        return 'token ' + this.opts.token;\n      } else if (username) {\n        return 'Basic ' + base64.encode(password ? username + ':' + password : username);\n      } else {\n        return undefined;\n      }\n    }\n    /**\n     * Get the API URL to request.\n     * @param  {String} httpMethod\n     * @param  {String} method\n     * @param  {Object} params\n     * @return {String}\n     */\n\n  }, {\n    key: 'url',\n    value: function url(httpMethod, method, params) {\n      var uri = isAbsoluteUrl(method) ? method : joinURL(this.opts.endpoint, method);\n\n      var parsedUrl = _url.parse(uri);\n\n      var parsedParams = querystring.parse(parsedUrl.query);\n      uri = _url.format(parsedUrl);\n\n      if (httpMethod == 'GET') {\n        parsedUrl.search = '?' + querystring.stringify(_extends({}, params, parsedParams));\n        uri = _url.format(parsedUrl);\n      }\n\n      return uri;\n    }\n    /**\n     * Parse an HTTP response to handle error.\n     */\n\n  }, {\n    key: 'onResponse',\n    value: function onResponse(response, body) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      opts = _extends({\n        successOn: ['2XX']\n      }, opts);\n      var statusCode = response ? response.statusCode : 0;\n      var statusType = Math.floor(statusCode / 100) + 'XX';\n      var success = opts.successOn.some(function (status) {\n        return status == statusType || status == statusCode;\n      }); // Try parsing body\n\n      if ((opts.json || !success) && is.string(body)) {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {// Ignore errors\n        }\n      } // Build result object\n\n\n      var result = {\n        response: response,\n        statusCode: statusCode,\n        statusType: statusType,\n        headers: response ? response.headers : {},\n        body: body\n      };\n\n      if (!success) {\n        throw GitHubError.createForResponse(result);\n      }\n\n      return result;\n    }\n    /**\n     * Execute an API request.\n     */\n\n  }, {\n    key: 'request',\n    value: function request(httpMethod, method, params) {\n      var _this = this;\n\n      var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n      opts = _extends({\n        headers: {},\n        json: true,\n        process: function process(r) {}\n      }, opts);\n      httpMethod = httpMethod.toUpperCase();\n      var d = Promise.defer();\n      var uri = this.url(httpMethod, method, params); // Build request\n\n      var r = _request(_extends({}, this.opts.request, {\n        method: httpMethod,\n        uri: uri,\n        json: opts.json,\n        body: httpMethod != 'GET' ? params : undefined,\n        headers: _extends({\n          'User-Agent': this.opts.userAgent,\n          'Authorization': this.getAuthorizationHeader()\n        }, this.opts.request.headers || {}, opts.headers)\n      }), function (err, response, body) {\n        if (err) {\n          return d.reject(err);\n        }\n\n        try {\n          var result = _this.onResponse(response, body, opts);\n\n          d.resolve(result);\n        } catch (e) {\n          d.reject(e);\n        }\n      });\n\n      opts.process(r);\n      return d.promise;\n    }\n    /**\n     * HTTP methods\n     */\n\n  }, {\n    key: 'get',\n    value: function get(uri, params, opts) {\n      return this.request('GET', uri, params, opts);\n    }\n  }, {\n    key: 'post',\n    value: function post(uri, params, opts) {\n      return this.request('POST', uri, params, opts);\n    }\n  }, {\n    key: 'patch',\n    value: function patch(uri, params, opts) {\n      return this.request('PATCH', uri, params, opts);\n    }\n  }, {\n    key: 'put',\n    value: function put(uri, params, opts) {\n      return this.request('PUT', uri, params, opts);\n    }\n  }, {\n    key: 'del',\n    value: function del(uri, params, opts) {\n      return this.request('DELETE', uri, params, opts);\n    }\n  }]);\n\n  return APIClient;\n}();\n\nmodule.exports = APIClient;","map":null,"metadata":{},"sourceType":"script"}