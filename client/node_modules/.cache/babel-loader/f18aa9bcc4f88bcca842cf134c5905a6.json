{"ast":null,"code":"/*\n * rm - Feb 2011\n * ctio.js:\n *\n * A simple way to read and write simple ctypes. Of course, as you'll find the\n * code isn't as simple as it might appear. The following types are currently\n * supported in big and little endian formats:\n *\n * \tuint8_t\t\t\tint8_t\n * \tuint16_t\t\tint16_t\n * \tuint32_t\t\tint32_t\n *\tfloat (single precision IEEE 754)\n *\tdouble (double precision IEEE 754)\n *\n * This is designed to work in Node and v8. It may in fact work in other\n * Javascript interpreters (that'd be pretty neat), but it hasn't been tested.\n * If you find that it does in fact work, that's pretty cool. Try and pass word\n * back to the original author.\n *\n * Note to the reader: If you're tabstop isn't set to 8, parts of this may look\n * weird.\n */\n\n/*\n * Numbers in Javascript have a secret: all numbers must be represented with an\n * IEEE-754 double. The double has a mantissa with a length of 52 bits with an\n * implicit one. Thus the range of integers that can be represented is limited\n * to the size of the mantissa, this makes reading and writing 64-bit integers\n * difficult, but far from impossible.\n *\n * Another side effect of this representation is what happens when you use the\n * bitwise operators, i.e. shift left, shift right, and, or, etc. In Javascript,\n * each operand and the result is cast to a signed 32-bit number. However, in\n * the case of >>> the values are cast to an unsigned number.\n */\n\n/*\n * A reminder on endian related issues:\n *\n * Big Endian: MSB -> First byte\n * Little Endian: MSB->Last byte\n */\nvar mod_assert = require('assert');\n/*\n * An 8 bit unsigned integer involves doing no significant work.\n */\n\n\nfunction ruint8(buffer, endian, offset) {\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  return buffer[offset];\n}\n/*\n * For 16 bit unsigned numbers we can do all the casting that we want to do.\n */\n\n\nfunction rgint16(buffer, endian, offset) {\n  var val = 0;\n\n  if (endian == 'big') {\n    val = buffer[offset] << 8;\n    val |= buffer[offset + 1];\n  } else {\n    val = buffer[offset];\n    val |= buffer[offset + 1] << 8;\n  }\n\n  return val;\n}\n\nfunction ruint16(buffer, endian, offset) {\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 1 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  return rgint16(buffer, endian, offset);\n}\n/*\n * Because most bitshifting is done using signed numbers, if we would go into\n * the realm where we use that 32nd bit, we'll end up going into the negative\n * range. i.e.:\n * > 200 << 24\n * -939524096\n *\n * Not the value you'd expect. To work around this, we end up having to do some\n * abuse of the JavaScript standard. in this case, we know that a >>> shift is\n * defined to cast our value to an *unsigned* 32-bit number. Because of that, we\n * use that instead to save us some additional math, though it does feel a\n * little weird and it isn't obvious as to why you woul dwant to do this at\n * first.\n */\n\n\nfunction rgint32(buffer, endian, offset) {\n  var val = 0;\n\n  if (endian == 'big') {\n    val = buffer[offset + 1] << 16;\n    val |= buffer[offset + 2] << 8;\n    val |= buffer[offset + 3];\n    val = val + (buffer[offset] << 24 >>> 0);\n  } else {\n    val = buffer[offset + 2] << 16;\n    val |= buffer[offset + 1] << 8;\n    val |= buffer[offset];\n    val = val + (buffer[offset + 3] << 24 >>> 0);\n  }\n\n  return val;\n}\n\nfunction ruint32(buffer, endian, offset) {\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  return rgint32(buffer, endian, offset);\n}\n/*\n * Reads a 64-bit unsigned number. The astue observer will note that this\n * doesn't quite work. Javascript has chosen to only have numbers that can be\n * represented by a double. A double only has 52 bits of mantissa with an\n * implicit 1, thus we have up to 53 bits to represent an integer. However, 2^53\n * doesn't quite give us what we want. Isn't 53 bits enough for anyone? What\n * could you have possibly wanted to represent that was larger than that? Oh,\n * maybe a size? You mean we bypassed the 4 GB limit on file sizes, when did\n * that happen?\n *\n * To get around this egregious language issue, we're going to instead construct\n * an array of two 32 bit unsigned integers. Where arr[0] << 32 + arr[1] would\n * give the actual number. However, note that the above code probably won't\n * produce the desired results because of the way Javascript numbers are\n * doubles.\n */\n\n\nfunction rgint64(buffer, endian, offset) {\n  var val = new Array(2);\n\n  if (endian == 'big') {\n    val[0] = ruint32(buffer, endian, offset);\n    val[1] = ruint32(buffer, endian, offset + 4);\n  } else {\n    val[0] = ruint32(buffer, endian, offset + 4);\n    val[1] = ruint32(buffer, endian, offset);\n  }\n\n  return val;\n}\n\nfunction ruint64(buffer, endian, offset) {\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 7 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  return rgint64(buffer, endian, offset);\n}\n/*\n * Signed integer types, yay team! A reminder on how two's complement actually\n * works. The first bit is the signed bit, i.e. tells us whether or not the\n * number should be positive or negative. If the two's complement value is\n * positive, then we're done, as it's equivalent to the unsigned representation.\n *\n * Now if the number is positive, you're pretty much done, you can just leverage\n * the unsigned translations and return those. Unfortunately, negative numbers\n * aren't quite that straightforward.\n *\n * At first glance, one might be inclined to use the traditional formula to\n * translate binary numbers between the positive and negative values in two's\n * complement. (Though it doesn't quite work for the most negative value)\n * Mainly:\n *  - invert all the bits\n *  - add one to the result\n *\n * Of course, this doesn't quite work in Javascript. Take for example the value\n * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of\n * course, Javascript will do the following:\n *\n * > ~0xff80\n * -65409\n *\n * Whoh there, Javascript, that's not quite right. But wait, according to\n * Javascript that's perfectly correct. When Javascript ends up seeing the\n * constant 0xff80, it has no notion that it is actually a signed number. It\n * assumes that we've input the unsigned value 0xff80. Thus, when it does the\n * binary negation, it casts it into a signed value, (positive 0xff80). Then\n * when you perform binary negation on that, it turns it into a negative number.\n *\n * Instead, we're going to have to use the following general formula, that works\n * in a rather Javascript friendly way. I'm glad we don't support this kind of\n * weird numbering scheme in the kernel.\n *\n * (BIT-MAX - (unsigned)val + 1) * -1\n *\n * The astute observer, may think that this doesn't make sense for 8-bit numbers\n * (really it isn't necessary for them). However, when you get 16-bit numbers,\n * you do. Let's go back to our prior example and see how this will look:\n *\n * (0xffff - 0xff80 + 1) * -1\n * (0x007f + 1) * -1\n * (0x0080) * -1\n *\n * Doing it this way ends up allowing us to treat it appropriately in\n * Javascript. Sigh, that's really quite ugly for what should just be a few bit\n * shifts, ~ and &.\n */\n\n/*\n * Endianness doesn't matter for 8-bit signed values. We could in fact optimize\n * this case because the more traditional methods work, but for consistency,\n * we'll keep doing this the same way.\n */\n\n\nfunction rsint8(buffer, endian, offset) {\n  var neg;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  neg = buffer[offset] & 0x80;\n  if (!neg) return buffer[offset];\n  return (0xff - buffer[offset] + 1) * -1;\n}\n/*\n * The 16-bit version requires a bit more effort. In this case, we can leverage\n * our unsigned code to generate the value we want to return.\n */\n\n\nfunction rsint16(buffer, endian, offset) {\n  var neg, val;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 1 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = rgint16(buffer, endian, offset);\n  neg = val & 0x8000;\n  if (!neg) return val;\n  return (0xffff - val + 1) * -1;\n}\n/*\n * We really shouldn't leverage our 32-bit code here and instead utilize the\n * fact that we know that since these are signed numbers, we can do all the\n * shifting and binary anding to generate the 32-bit number. But, for\n * consistency we'll do the same. If we want to do otherwise, we should instead\n * make the 32 bit unsigned code do the optimization. But as long as there\n * aren't floats secretly under the hood for that, we /should/ be okay.\n */\n\n\nfunction rsint32(buffer, endian, offset) {\n  var neg, val;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = rgint32(buffer, endian, offset);\n  neg = val & 0x80000000;\n  if (!neg) return val;\n  return (0xffffffff - val + 1) * -1;\n}\n/*\n * The signed version of this code suffers from all of the same problems of the\n * other 64 bit version.\n */\n\n\nfunction rsint64(buffer, endian, offset) {\n  var neg, val;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = rgint64(buffer, endian, offset);\n  neg = val[0] & 0x80000000;\n  if (!neg) return val;\n  val[0] = (0xffffffff - val[0]) * -1;\n  val[1] = (0xffffffff - val[1] + 1) * -1;\n  /*\n   * If we had the key 0x8000000000000000, that would leave the lower 32\n   * bits as 0xffffffff, however, since we're goint to add one, that would\n   * actually leave the lower 32-bits as 0x100000000, which would break\n   * our ability to write back a value that we received. To work around\n   * this, if we actually get that value, we're going to bump the upper\n   * portion by 1 and set this to zero.\n   */\n\n  mod_assert.ok(val[1] <= 0x100000000);\n\n  if (val[1] == -0x100000000) {\n    val[1] = 0;\n    val[0]--;\n  }\n\n  return val;\n}\n/*\n * We now move onto IEEE 754: The traditional form for floating point numbers\n * and what is secretly hiding at the heart of everything in this. I really hope\n * that someone is actually using this, as otherwise, this effort is probably\n * going to be more wasted.\n *\n * One might be tempted to use parseFloat here, but that wouldn't work at all\n * for several reasons. Mostly due to the way floats actually work, and\n * parseFloat only actually works in base 10. I don't see base 10 anywhere near\n * this file.\n *\n * In this case we'll implement the single and double precision versions. The\n * quadruple precision, while probably useful, wouldn't really be accepted by\n * Javascript, so let's not even waste our time.\n *\n * So let's review how this format looks like. A single precision value is 32\n * bits and has three parts:\n *   -  Sign bit\n *   -  Exponent (Using bias notation)\n *   -  Mantissa\n *\n * |s|eeeeeeee|mmmmmmmmmmmmmmmmmmmmmmmmm|\n * 31| 30-23  |  22    \t-       0       |\n *\n * The exponent is stored in a biased input. The bias in this case 127.\n * Therefore, our exponent is equal to the 8-bit value - 127.\n *\n * By default, a number is normalized in IEEE, that means that the mantissa has\n * an implicit one that we don't see. So really the value stored is 1.m.\n * However, if the exponent is all zeros, then instead we have to shift\n * everything to the right one and there is no more implicit one.\n *\n * Special values:\n *  - Positive Infinity:\n *\tSign:\t\t0\n *\tExponent: \tAll 1s\n *\tMantissa:\t0\n *  - Negative Infinity:\n *\tSign:\t\t1\n *\tExponent: \tAll 1s\n *\tMantissa:\t0\n *  - NaN:\n *\tSign:\t\t*\n *\tExponent: \tAll 1s\n *\tMantissa:\tnon-zero\n *  - Zero:\n *\tSign:\t\t*\n *\tExponent:\tAll 0s\n *\tMantissa:\t0\n *\n * In the case of zero, the sign bit determines whether we get a positive or\n * negative zero. However, since Javascript cannot determine the difference\n * between the two: i.e. -0 == 0, we just always return 0.\n *\n */\n\n\nfunction rfloat(buffer, endian, offset) {\n  var bytes = [];\n  var sign, exponent, mantissa, val;\n  var bias = 127;\n  var maxexp = 0xff;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  /* Normalize the bytes to be in endian order */\n\n  if (endian == 'big') {\n    bytes[0] = buffer[offset];\n    bytes[1] = buffer[offset + 1];\n    bytes[2] = buffer[offset + 2];\n    bytes[3] = buffer[offset + 3];\n  } else {\n    bytes[3] = buffer[offset];\n    bytes[2] = buffer[offset + 1];\n    bytes[1] = buffer[offset + 2];\n    bytes[0] = buffer[offset + 3];\n  }\n\n  sign = bytes[0] & 0x80;\n  exponent = (bytes[0] & 0x7f) << 1;\n  exponent |= (bytes[1] & 0x80) >>> 7;\n  mantissa = (bytes[1] & 0x7f) << 16;\n  mantissa |= bytes[2] << 8;\n  mantissa |= bytes[3];\n  /* Check for special cases before we do general parsing */\n\n  if (!sign && exponent == maxexp && mantissa === 0) return Number.POSITIVE_INFINITY;\n  if (sign && exponent == maxexp && mantissa === 0) return Number.NEGATIVE_INFINITY;\n  if (exponent == maxexp && mantissa !== 0) return Number.NaN;\n  /*\n   * Javascript really doesn't have support for positive or negative zero.\n   * So we're not going to try and give it to you. That would be just\n   * plain weird. Besides -0 == 0.\n   */\n\n  if (exponent === 0 && mantissa === 0) return 0;\n  /*\n   * Now we can deal with the bias and the determine whether the mantissa\n   * has the implicit one or not.\n   */\n\n  exponent -= bias;\n\n  if (exponent == -bias) {\n    exponent++;\n    val = 0;\n  } else {\n    val = 1;\n  }\n\n  val = (val + mantissa * Math.pow(2, -23)) * Math.pow(2, exponent);\n  if (sign) val *= -1;\n  return val;\n}\n/*\n * Doubles in IEEE 754 are like their brothers except for a few changes and\n * increases in size:\n *   - The exponent is now 11 bits\n *   - The mantissa is now 52 bits\n *   - The bias is now 1023\n *\n * |s|eeeeeeeeeee|mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm|\n * 63| 62 - 52   | \t51\t\t-\t\t\t0     |\n * 63| 62 - 52   |      51              -                       0     |\n *\n * While the size has increased a fair amount, we're going to end up keeping the\n * same general formula for calculating the final value. As a reminder, this\n * formula is:\n *\n * (-1)^s * (n + m) * 2^(e-b)\n *\n * Where:\n *\ts\tis the sign bit\n *\tn\tis (exponent > 0) ? 1 : 0 -- Determines whether we're normalized\n *\t\t\t\t\t     or not\n *\tm\tis the mantissa\n *\te\tis the exponent specified\n *\tb\tis the bias for the exponent\n *\n */\n\n\nfunction rdouble(buffer, endian, offset) {\n  var bytes = [];\n  var sign, exponent, mantissa, val, lowmant;\n  var bias = 1023;\n  var maxexp = 0x7ff;\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 7 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  /* Normalize the bytes to be in endian order */\n\n  if (endian == 'big') {\n    bytes[0] = buffer[offset];\n    bytes[1] = buffer[offset + 1];\n    bytes[2] = buffer[offset + 2];\n    bytes[3] = buffer[offset + 3];\n    bytes[4] = buffer[offset + 4];\n    bytes[5] = buffer[offset + 5];\n    bytes[6] = buffer[offset + 6];\n    bytes[7] = buffer[offset + 7];\n  } else {\n    bytes[7] = buffer[offset];\n    bytes[6] = buffer[offset + 1];\n    bytes[5] = buffer[offset + 2];\n    bytes[4] = buffer[offset + 3];\n    bytes[3] = buffer[offset + 4];\n    bytes[2] = buffer[offset + 5];\n    bytes[1] = buffer[offset + 6];\n    bytes[0] = buffer[offset + 7];\n  }\n  /*\n   * We can construct the exponent and mantissa the same way as we did in\n   * the case of a float, just increase the range of the exponent.\n   */\n\n\n  sign = bytes[0] & 0x80;\n  exponent = (bytes[0] & 0x7f) << 4;\n  exponent |= (bytes[1] & 0xf0) >>> 4;\n  /*\n   * This is going to be ugly but then again, we're dealing with IEEE 754.\n   * This could probably be done as a node add on in a few lines of C++,\n   * but oh we'll, we've made it this far so let's be native the rest of\n   * the way...\n   *\n   * What we're going to do is break the mantissa into two parts, the\n   * lower 24 bits and the upper 28 bits. We'll multiply the upper 28 bits\n   * by the appropriate power and then add in the lower 24-bits. Not\n   * really that great. It's pretty much a giant kludge to deal with\n   * Javascript eccentricities around numbers.\n   */\n\n  lowmant = bytes[7];\n  lowmant |= bytes[6] << 8;\n  lowmant |= bytes[5] << 16;\n  mantissa = bytes[4];\n  mantissa |= bytes[3] << 8;\n  mantissa |= bytes[2] << 16;\n  mantissa |= (bytes[1] & 0x0f) << 24;\n  mantissa *= Math.pow(2, 24);\n  /* Equivalent to << 24, but JS compat */\n\n  mantissa += lowmant;\n  /* Check for special cases before we do general parsing */\n\n  if (!sign && exponent == maxexp && mantissa === 0) return Number.POSITIVE_INFINITY;\n  if (sign && exponent == maxexp && mantissa === 0) return Number.NEGATIVE_INFINITY;\n  if (exponent == maxexp && mantissa !== 0) return Number.NaN;\n  /*\n   * Javascript really doesn't have support for positive or negative zero.\n   * So we're not going to try and give it to you. That would be just\n   * plain weird. Besides -0 == 0.\n   */\n\n  if (exponent === 0 && mantissa === 0) return 0;\n  /*\n   * Now we can deal with the bias and the determine whether the mantissa\n   * has the implicit one or not.\n   */\n\n  exponent -= bias;\n\n  if (exponent == -bias) {\n    exponent++;\n    val = 0;\n  } else {\n    val = 1;\n  }\n\n  val = (val + mantissa * Math.pow(2, -52)) * Math.pow(2, exponent);\n  if (sign) val *= -1;\n  return val;\n}\n/*\n * Now that we have gone through the pain of reading the individual types, we're\n * probably going to want some way to write these back. None of this is going to\n * be good. But since we have Javascript numbers this should certainly be more\n * interesting. Though we can constrain this end a little bit more in what is\n * valid. For now, let's go back to our friends the unsigned value.\n */\n\n/*\n * Unsigned numbers seem deceptively easy. Here are the general steps and rules\n * that we are going to take:\n *   -  If the number is negative, throw an Error\n *   -  Truncate any floating point portion\n *   -  Take the modulus of the number in our base\n *   -  Write it out to the buffer in the endian format requested at the offset\n */\n\n/*\n * We have to make sure that the value is a valid integer. This means that it is\n * non-negative. It has no fractional component and that it does not exceed the\n * maximum allowed value.\n *\n *\tvalue\t\tThe number to check for validity\n *\n *\tmax\t\tThe maximum value\n */\n\n\nfunction prepuint(value, max) {\n  if (typeof value != 'number') throw new (Error('cannot write a non-number as a number'))();\n  if (value < 0) throw new Error('specified a negative value for writing an ' + 'unsigned value');\n  if (value > max) throw new Error('value is larger than maximum value for ' + 'type');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n  return value;\n}\n/*\n * 8-bit version, classy. We can ignore endianness which is good.\n */\n\n\nfunction wuint8(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepuint(value, 0xff);\n  buffer[offset] = val;\n}\n/*\n * Pretty much the same as the 8-bit version, just this time we need to worry\n * about endian related issues.\n */\n\n\nfunction wgint16(val, endian, buffer, offset) {\n  if (endian == 'big') {\n    buffer[offset] = (val & 0xff00) >>> 8;\n    buffer[offset + 1] = val & 0x00ff;\n  } else {\n    buffer[offset + 1] = (val & 0xff00) >>> 8;\n    buffer[offset] = val & 0x00ff;\n  }\n}\n\nfunction wuint16(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 1 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepuint(value, 0xffff);\n  wgint16(val, endian, buffer, offset);\n}\n/*\n * The 32-bit version is going to have to be a little different unfortunately.\n * We can't quite bitshift to get the largest byte, because that would end up\n * getting us caught by the signed values.\n *\n * And yes, we do want to subtract out the lower part by default. This means\n * that when we do the division, it will be treated as a bit shift and we won't\n * end up generating a floating point value. If we did generate a floating point\n * value we'd have to truncate it intelligently, this saves us that problem and\n * may even be somewhat faster under the hood.\n */\n\n\nfunction wgint32(val, endian, buffer, offset) {\n  if (endian == 'big') {\n    buffer[offset] = (val - (val & 0x00ffffff)) / Math.pow(2, 24);\n    buffer[offset + 1] = val >>> 16 & 0xff;\n    buffer[offset + 2] = val >>> 8 & 0xff;\n    buffer[offset + 3] = val & 0xff;\n  } else {\n    buffer[offset + 3] = (val - (val & 0x00ffffff)) / Math.pow(2, 24);\n    buffer[offset + 2] = val >>> 16 & 0xff;\n    buffer[offset + 1] = val >>> 8 & 0xff;\n    buffer[offset] = val & 0xff;\n  }\n}\n\nfunction wuint32(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepuint(value, 0xffffffff);\n  wgint32(val, endian, buffer, offset);\n}\n/*\n * Unlike the other versions, we expect the value to be in the form of two\n * arrays where value[0] << 32 + value[1] would result in the value that we\n * want.\n */\n\n\nfunction wgint64(value, endian, buffer, offset) {\n  if (endian == 'big') {\n    wgint32(value[0], endian, buffer, offset);\n    wgint32(value[1], endian, buffer, offset + 4);\n  } else {\n    wgint32(value[0], endian, buffer, offset + 4);\n    wgint32(value[1], endian, buffer, offset);\n  }\n}\n\nfunction wuint64(value, endian, buffer, offset) {\n  if (value === undefined) throw new Error('missing value');\n  if (!(value instanceof Array)) throw new Error('value must be an array');\n  if (value.length != 2) throw new Error('value must be an array of length 2');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 7 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  prepuint(value[0], 0xffffffff);\n  prepuint(value[1], 0xffffffff);\n  wgint64(value, endian, buffer, offset);\n}\n/*\n * We now move onto our friends in the signed number category. Unlike unsigned\n * numbers, we're going to have to worry a bit more about how we put values into\n * arrays. Since we are only worrying about signed 32-bit values, we're in\n * slightly better shape. Unfortunately, we really can't do our favorite binary\n * & in this system. It really seems to do the wrong thing. For example:\n *\n * > -32 & 0xff\n * 224\n *\n * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of\n * this aren't treated as a signed number. Ultimately a bad thing.\n *\n * What we're going to want to do is basically create the unsigned equivalent of\n * our representation and pass that off to the wuint* functions. To do that\n * we're going to do the following:\n *\n *  - if the value is positive\n *\twe can pass it directly off to the equivalent wuint\n *  - if the value is negative\n *\twe do the following computation:\n *\tmb + val + 1, where\n *\tmb\tis the maximum unsigned value in that byte size\n *\tval\tis the Javascript negative integer\n *\n *\n * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If\n * you do out the computations:\n *\n * 0xffff - 128 + 1\n * 0xffff - 127\n * 0xff80\n *\n * You can then encode this value as the signed version. This is really rather\n * hacky, but it should work and get the job done which is our goal here.\n *\n * Thus the overall flow is:\n *   -  Truncate the floating point part of the number\n *   -  We don't have to take the modulus, because the unsigned versions will\n *   \ttake care of that for us. And we don't have to worry about that\n *   \tpotentially causing bad things to happen because of sign extension\n *   -  Pass it off to the appropriate unsigned version, potentially modifying\n *\tthe negative portions as necessary.\n */\n\n/*\n * A series of checks to make sure we actually have a signed 32-bit number\n */\n\n\nfunction prepsint(value, max, min) {\n  if (typeof value != 'number') throw new (Error('cannot write a non-number as a number'))();\n  if (value > max) throw new Error('value larger than maximum allowed value');\n  if (value < min) throw new Error('value smaller than minimum allowed value');\n  if (Math.floor(value) !== value) throw new Error('value has a fractional component');\n  return value;\n}\n/*\n * The 8-bit version of the signed value. Overall, fairly straightforward.\n */\n\n\nfunction wsint8(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepsint(value, 0x7f, -0x80);\n  if (val >= 0) wuint8(val, endian, buffer, offset);else wuint8(0xff + val + 1, endian, buffer, offset);\n}\n/*\n * The 16-bit version of the signed value. Also, fairly straightforward.\n */\n\n\nfunction wsint16(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 1 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepsint(value, 0x7fff, -0x8000);\n  if (val >= 0) wgint16(val, endian, buffer, offset);else wgint16(0xffff + val + 1, endian, buffer, offset);\n}\n/*\n * We can do this relatively easily by leveraging the code used for 32-bit\n * unsigned code.\n */\n\n\nfunction wsint32(value, endian, buffer, offset) {\n  var val;\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  val = prepsint(value, 0x7fffffff, -0x80000000);\n  if (val >= 0) wgint32(val, endian, buffer, offset);else wgint32(0xffffffff + val + 1, endian, buffer, offset);\n}\n/*\n * The signed 64 bit integer should by in the same format as when received.\n * Mainly it should ensure that the value is an array of two integers where\n * value[0] << 32 + value[1] is the desired number. Furthermore, the two values\n * need to be equal.\n */\n\n\nfunction wsint64(value, endian, buffer, offset) {\n  var vzpos, vopos;\n  var vals = new Array(2);\n  if (value === undefined) throw new Error('missing value');\n  if (!(value instanceof Array)) throw new Error('value must be an array');\n  if (value.length != 2) throw new Error('value must be an array of length 2');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 7 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n  /*\n   * We need to make sure that we have the same sign on both values. The\n   * hokiest way to to do this is to multiply the number by +inf. If we do\n   * this, we'll get either +/-inf depending on the sign of the value.\n   * Once we have this, we can compare it to +inf to see if the number is\n   * positive or not.\n   */\n\n  vzpos = value[0] * Number.POSITIVE_INFINITY == Number.POSITIVE_INFINITY;\n  vopos = value[1] * Number.POSITIVE_INFINITY == Number.POSITIVE_INFINITY;\n  /*\n   * If either of these is zero, then we don't actually need this check.\n   */\n\n  if (value[0] != 0 && value[1] != 0 && vzpos != vopos) throw new Error('Both entries in the array must have ' + 'the same sign');\n  /*\n   * Doing verification for a signed 64-bit integer is actually a big\n   * trickier than it appears. We can't quite use our standard techniques\n   * because we need to compare both sets of values. The first value is\n   * pretty straightforward. If the first value is beond the extremes than\n   * we error out. However, the valid range of the second value varies\n   * based on the first one. If the first value is negative, and *not* the\n   * largest negative value, than it can be any integer within the range [\n   * 0, 0xffffffff ]. If it is the largest negative number, it must be\n   * zero.\n   *\n   * If the first number is positive, than it doesn't matter what the\n   * value is. We just simply have to make sure we have a valid positive\n   * integer.\n   */\n\n  if (vzpos) {\n    prepuint(value[0], 0x7fffffff);\n    prepuint(value[1], 0xffffffff);\n  } else {\n    prepsint(value[0], 0, -0x80000000);\n    prepsint(value[1], 0, -0xffffffff);\n    if (value[0] == -0x80000000 && value[1] != 0) throw new Error('value smaller than minimum ' + 'allowed value');\n  }\n  /* Fix negative numbers */\n\n\n  if (value[0] < 0 || value[1] < 0) {\n    vals[0] = 0xffffffff - Math.abs(value[0]);\n    vals[1] = 0x100000000 - Math.abs(value[1]);\n\n    if (vals[1] == 0x100000000) {\n      vals[1] = 0;\n      vals[0]++;\n    }\n  } else {\n    vals[0] = value[0];\n    vals[1] = value[1];\n  }\n\n  wgint64(vals, endian, buffer, offset);\n}\n/*\n * Now we are moving onto the weirder of these, the float and double. For this\n * we're going to just have to do something that's pretty weird. First off, we\n * have no way to get at the underlying float representation, at least not\n * easily. But that doesn't mean we can't figure it out, we just have to use our\n * heads.\n *\n * One might propose to use Number.toString(2). Of course, this is not really\n * that good, because the ECMAScript 262 v3 Standard says the following Section\n * 15.7.4.2-Number.prototype.toString (radix):\n *\n * If radix is an integer from 2 to 36, but not 10, the result is a string, the\n * choice of which is implementation-dependent.\n *\n * Well that doesn't really help us one bit now does it? We could use the\n * standard base 10 version of the string, but that's just going to create more\n * errors as we end up trying to convert it back to a binary value. So, really\n * this just means we have to be non-lazy and parse the structure intelligently.\n *\n * First off, we can do the basic checks: NaN, positive and negative infinity.\n *\n * Now that those are done we can work backwards to generate the mantissa and\n * exponent.\n *\n * The first thing we need to do is determine the sign bit, easy to do, check\n * whether the value is less than 0. And convert the number to its absolute\n * value representation. Next, we need to determine if the value is less than\n * one or greater than or equal to one and from there determine what power was\n * used to get there. What follows is now specific to floats, though the general\n * ideas behind this will hold for doubles as well, but the exact numbers\n * involved will change.\n *\n * Once we have that power we can determine the exponent and the mantissa. Call\n * the value that has the number of bits to reach the power ebits. In the\n * general case they have the following values:\n *\n *\texponent\t127 + ebits\n *\tmantissa\tvalue * 2^(23 - ebits) & 0x7fffff\n *\n * In the case where the value of ebits is <= -127 we are now in the case where\n * we no longer have normalized numbers. In this case the values take on the\n * following values:\n *\n * \texponent\t0\n *\tmantissa\tvalue * 2^149 & 0x7fffff\n *\n * Once we have the values for the sign, mantissa, and exponent. We reconstruct\n * the four bytes as follows:\n *\n *\tbyte0\t\tsign bit and seven most significant bits from the exp\n *\t\t\tsign << 7 | (exponent & 0xfe) >>> 1\n *\n *\tbyte1\t\tlsb from the exponent and 7 top bits from the mantissa\n *\t\t\t(exponent & 0x01) << 7 | (mantissa & 0x7f0000) >>> 16\n *\n *\tbyte2\t\tbits 8-15 (zero indexing) from mantissa\n *\t\t\tmantissa & 0xff00 >> 8\n *\n *\tbyte3\t\tbits 0-7 from mantissa\n *\t\t\tmantissa & 0xff\n *\n * Once we have this we have to assign them into the buffer in proper endian\n * order.\n */\n\n/*\n * Compute the log base 2 of the value. Now, someone who remembers basic\n * properties of logarithms will point out that we could use the change of base\n * formula for logs, and in fact that would be astute, because that's what we'll\n * do for now. It feels cleaner, albeit it may be less efficient than just\n * iterating and dividing by 2. We may want to come back and revisit that some\n * day.\n */\n\n\nfunction log2(value) {\n  return Math.log(value) / Math.log(2);\n}\n/*\n * Helper to determine the exponent of the number we're looking at.\n */\n\n\nfunction intexp(value) {\n  return Math.floor(log2(value));\n}\n/*\n * Helper to determine the exponent of the fractional part of the value.\n */\n\n\nfunction fracexp(value) {\n  return Math.floor(log2(value));\n}\n\nfunction wfloat(value, endian, buffer, offset) {\n  var sign, exponent, mantissa, ebits;\n  var bytes = [];\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 3 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n\n  if (isNaN(value)) {\n    sign = 0;\n    exponent = 0xff;\n    mantissa = 23;\n  } else if (value == Number.POSITIVE_INFINITY) {\n    sign = 0;\n    exponent = 0xff;\n    mantissa = 0;\n  } else if (value == Number.NEGATIVE_INFINITY) {\n    sign = 1;\n    exponent = 0xff;\n    mantissa = 0;\n  } else {\n    /* Well we have some work to do */\n\n    /* Thankfully the sign bit is trivial */\n    if (value < 0) {\n      sign = 1;\n      value = Math.abs(value);\n    } else {\n      sign = 0;\n    }\n    /* Use the correct function to determine number of bits */\n\n\n    if (value < 1) ebits = fracexp(value);else ebits = intexp(value);\n    /* Time to deal with the issues surrounding normalization */\n\n    if (ebits <= -127) {\n      exponent = 0;\n      mantissa = value * Math.pow(2, 149) & 0x7fffff;\n    } else {\n      exponent = 127 + ebits;\n      mantissa = value * Math.pow(2, 23 - ebits);\n      mantissa &= 0x7fffff;\n    }\n  }\n\n  bytes[0] = sign << 7 | (exponent & 0xfe) >>> 1;\n  bytes[1] = (exponent & 0x01) << 7 | (mantissa & 0x7f0000) >>> 16;\n  bytes[2] = (mantissa & 0x00ff00) >>> 8;\n  bytes[3] = mantissa & 0x0000ff;\n\n  if (endian == 'big') {\n    buffer[offset] = bytes[0];\n    buffer[offset + 1] = bytes[1];\n    buffer[offset + 2] = bytes[2];\n    buffer[offset + 3] = bytes[3];\n  } else {\n    buffer[offset] = bytes[3];\n    buffer[offset + 1] = bytes[2];\n    buffer[offset + 2] = bytes[1];\n    buffer[offset + 3] = bytes[0];\n  }\n}\n/*\n * Now we move onto doubles. Doubles are similar to floats in pretty much all\n * ways except that the processing isn't quite as straightforward because we\n * can't always use shifting, i.e. we have > 32 bit values.\n *\n * We're going to proceed in an identical fashion to floats and utilize the same\n * helper functions. All that really is changing are the specific values that we\n * use to do the calculations. Thus, to review we have to do the following.\n *\n * First get the sign bit and convert the value to its absolute value\n * representation. Next, we determine the number of bits that we used to get to\n * the value, branching whether the value is greater than or less than 1. Once\n * we have that value which we will again call ebits, we have to do the\n * following in the general case:\n *\n *\texponent\t1023 + ebits\n *\tmantissa\t[value * 2^(52 - ebits)] % 2^52\n *\n * In the case where the value of ebits <= -1023 we no longer use normalized\n * numbers, thus like with floats we have to do slightly different processing:\n *\n *\texponent\t0\n *\tmantissa\t[value * 2^1074] % 2^52\n *\n * Once we have determined the sign, exponent and mantissa we can construct the\n * bytes as follows:\n *\n *\tbyte0\t\tsign bit and seven most significant bits form the exp\n *\t\t\tsign << 7 | (exponent & 0x7f0) >>> 4\n *\n *\tbyte1\t\tRemaining 4 bits from the exponent and the four most\n *\t\t\tsignificant bits from the mantissa 48-51\n *\t\t\t(exponent & 0x00f) << 4 | mantissa >>> 48\n *\n *\tbyte2\t\tBits 40-47 from the mantissa\n *\t\t\t(mantissa >>> 40) & 0xff\n *\n *\tbyte3\t\tBits 32-39 from the mantissa\n *\t\t\t(mantissa >>> 32) & 0xff\n *\n *\tbyte4\t\tBits 24-31 from the mantissa\n *\t\t\t(mantissa >>> 24) & 0xff\n *\n *\tbyte5\t\tBits 16-23 from the Mantissa\n *\t\t\t(mantissa >>> 16) & 0xff\n *\n *\tbyte6\t\tBits 8-15 from the mantissa\n *\t\t\t(mantissa >>> 8) & 0xff\n *\n *\tbyte7\t\tBits 0-7 from the mantissa\n *\t\t\tmantissa & 0xff\n *\n * Now we can't quite do the right shifting that we want in bytes 1 - 3, because\n * we'll have extended too far and we'll lose those values when we try and do\n * the shift. Instead we have to use an alternate approach. To try and stay out\n * of floating point, what we'll do is say that mantissa -= bytes[4-7] and then\n * divide by 2^32. Once we've done that we can use binary arithmetic. Oof,\n * that's ugly, but it seems to avoid using floating point (just based on how v8\n * seems to be optimizing for base 2 arithmetic).\n */\n\n\nfunction wdouble(value, endian, buffer, offset) {\n  var sign, exponent, mantissa, ebits;\n  var bytes = [];\n  if (value === undefined) throw new Error('missing value');\n  if (endian === undefined) throw new Error('missing endian');\n  if (buffer === undefined) throw new Error('missing buffer');\n  if (offset === undefined) throw new Error('missing offset');\n  if (offset + 7 >= buffer.length) throw new Error('Trying to read beyond buffer length');\n\n  if (isNaN(value)) {\n    sign = 0;\n    exponent = 0x7ff;\n    mantissa = 23;\n  } else if (value == Number.POSITIVE_INFINITY) {\n    sign = 0;\n    exponent = 0x7ff;\n    mantissa = 0;\n  } else if (value == Number.NEGATIVE_INFINITY) {\n    sign = 1;\n    exponent = 0x7ff;\n    mantissa = 0;\n  } else {\n    /* Well we have some work to do */\n\n    /* Thankfully the sign bit is trivial */\n    if (value < 0) {\n      sign = 1;\n      value = Math.abs(value);\n    } else {\n      sign = 0;\n    }\n    /* Use the correct function to determine number of bits */\n\n\n    if (value < 1) ebits = fracexp(value);else ebits = intexp(value);\n    /*\n     * This is a total hack to determine a denormalized value.\n     * Unfortunately, we sometimes do not get a proper value for\n     * ebits, i.e. we lose the values that would get rounded off.\n     *\n     *\n     * The astute observer may wonder why we would be\n     * multiplying by two Math.pows rather than just summing\n     * them. Well, that's to get around a small bug in the\n     * way v8 seems to implement the function. On occasion\n     * doing:\n     *\n     * foo * Math.pow(2, 1023 + 51)\n     *\n     * Causes us to overflow to infinity, where as doing:\n     *\n     * foo * Math.pow(2, 1023) * Math.pow(2, 51)\n     *\n     * Does not cause us to overflow. Go figure.\n     *\n     */\n\n    if (value <= 2.225073858507201e-308 || ebits <= -1023) {\n      exponent = 0;\n      mantissa = value * Math.pow(2, 1023) * Math.pow(2, 51);\n      mantissa %= Math.pow(2, 52);\n    } else {\n      /*\n       * We might have gotten fucked by our floating point\n       * logarithm magic. This is rather crappy, but that's\n       * our luck. If we just had a log base 2 or access to\n       * the stupid underlying representation this would have\n       * been much easier and we wouldn't have such stupid\n       * kludges or hacks.\n       */\n      if (ebits > 1023) ebits = 1023;\n      exponent = 1023 + ebits;\n      mantissa = value * Math.pow(2, -ebits);\n      mantissa *= Math.pow(2, 52);\n      mantissa %= Math.pow(2, 52);\n    }\n  }\n  /* Fill the bytes in backwards to deal with the size issues */\n\n\n  bytes[7] = mantissa & 0xff;\n  bytes[6] = mantissa >>> 8 & 0xff;\n  bytes[5] = mantissa >>> 16 & 0xff;\n  mantissa = (mantissa - (mantissa & 0xffffff)) / Math.pow(2, 24);\n  bytes[4] = mantissa & 0xff;\n  bytes[3] = mantissa >>> 8 & 0xff;\n  bytes[2] = mantissa >>> 16 & 0xff;\n  bytes[1] = (exponent & 0x00f) << 4 | mantissa >>> 24;\n  bytes[0] = sign << 7 | (exponent & 0x7f0) >>> 4;\n\n  if (endian == 'big') {\n    buffer[offset] = bytes[0];\n    buffer[offset + 1] = bytes[1];\n    buffer[offset + 2] = bytes[2];\n    buffer[offset + 3] = bytes[3];\n    buffer[offset + 4] = bytes[4];\n    buffer[offset + 5] = bytes[5];\n    buffer[offset + 6] = bytes[6];\n    buffer[offset + 7] = bytes[7];\n  } else {\n    buffer[offset + 7] = bytes[0];\n    buffer[offset + 6] = bytes[1];\n    buffer[offset + 5] = bytes[2];\n    buffer[offset + 4] = bytes[3];\n    buffer[offset + 3] = bytes[4];\n    buffer[offset + 2] = bytes[5];\n    buffer[offset + 1] = bytes[6];\n    buffer[offset] = bytes[7];\n  }\n}\n/*\n * Actually export our work above. One might argue that we shouldn't expose\n * these interfaces and just force people to use the higher level abstractions\n * around this work. However, unlike say other libraries we've come across, this\n * interface has several properties: it makes sense, it's simple, and it's\n * useful.\n */\n\n\nexports.ruint8 = ruint8;\nexports.ruint16 = ruint16;\nexports.ruint32 = ruint32;\nexports.ruint64 = ruint64;\nexports.wuint8 = wuint8;\nexports.wuint16 = wuint16;\nexports.wuint32 = wuint32;\nexports.wuint64 = wuint64;\nexports.rsint8 = rsint8;\nexports.rsint16 = rsint16;\nexports.rsint32 = rsint32;\nexports.rsint64 = rsint64;\nexports.wsint8 = wsint8;\nexports.wsint16 = wsint16;\nexports.wsint32 = wsint32;\nexports.wsint64 = wsint64;\nexports.rfloat = rfloat;\nexports.rdouble = rdouble;\nexports.wfloat = wfloat;\nexports.wdouble = wdouble;","map":null,"metadata":{},"sourceType":"script"}