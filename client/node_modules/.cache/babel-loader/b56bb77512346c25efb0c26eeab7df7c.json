{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Promise = require('q');\n\nvar is = require('is');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar mime = require('mime-types');\n\nvar querystring = require('querystring');\n\nvar progress = require('progress-stream');\n\nvar Resource = require('./resource');\n\nvar ReleaseAsset = require('./release_asset');\n/**\n * Model to represent a release.\n * @type {Resource}\n */\n\n\nvar Release = function (_Resource) {\n  _inherits(Release, _Resource);\n\n  function Release(client, repo, id) {\n    _classCallCheck(this, Release);\n\n    var _this = _possibleConstructorReturn(this, (Release.__proto__ || Object.getPrototypeOf(Release)).call(this, client));\n\n    _this.repo = repo;\n    _this.id = id;\n    _this._infos = null;\n    return _this;\n  }\n  /**\n   * Return API endpoint for this asset.\n   */\n\n\n  _createClass(Release, [{\n    key: 'url',\n    value: function url() {\n      var _repo;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_repo = this.repo).url.apply(_repo, ['releases/' + this.id].concat(args));\n    }\n  }, {\n    key: 'asset',\n    value: function asset(id) {\n      return this.resource(ReleaseAsset, id);\n    } // Get details about the release\n\n  }, {\n    key: 'info',\n    value: function info() {\n      var that = this;\n      return this.get('').get('body').tap(function (infos) {\n        that._infos = infos;\n      });\n    } // Edit this release\n\n  }, {\n    key: 'edit',\n    value: function edit(params) {\n      return this.patch('', params).get('body');\n    }\n    /**\n     * Upload an asset\n     */\n\n  }, {\n    key: 'upload',\n    value: function upload(output, opts) {\n      var that = this;\n      var originalOutput = void 0;\n      opts = _extends({\n        name: null,\n        label: undefined,\n        mime: null,\n        size: null\n      }, opts); // Normalize to a stream\n\n      if (is.string(output)) {\n        originalOutput = output;\n        opts.name = opts.name || path.basename(output);\n        output = fs.createReadStream(output);\n      } else {\n        if (!opts.name || !opts.size) {\n          throw new Error('Need \\'name\\' and \\'size\\' options when uploading a stream');\n        }\n      } // Detect mime type\n\n\n      if (!opts.mime) {\n        opts.mime = mime.lookup(opts.name) || 'application/octet-stream';\n      }\n\n      return Promise() // Detect size\n      .then(function () {\n        if (opts.size) {\n          return opts.size;\n        }\n\n        return Promise.nfcall(fs.stat, originalOutput).get('size');\n      }).then(function (size) {\n        opts.size = size;\n        return that._infos || that.info();\n      }).then(function (release) {\n        var d = Promise.defer();\n        var uploadUrl = release.upload_url.replace(/\\{(\\S+)\\}/, '') + '?' + querystring.stringify({\n          name: opts.name,\n          label: opts.label\n        });\n        var prg = progress({\n          length: opts.size,\n          time: 100\n        });\n        prg.on('progress', function (state) {\n          d.notify(state);\n        });\n        output.on('error', function (err) {\n          d.reject(err);\n        });\n        that.client.post(uploadUrl, undefined, {\n          json: false,\n          headers: {\n            'Content-Type': opts.mime,\n            'Content-Length': opts.size\n          },\n          process: function process(r) {\n            output.pipe(prg).pipe(r);\n          }\n        }).then(function () {\n          d.resolve();\n        }, function (err) {\n          d.reject(err);\n        });\n        return d.promise;\n      });\n    } // Remove the release\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      return this.del('/');\n    }\n  }]);\n\n  return Release;\n}(Resource);\n\nmodule.exports = Release;","map":null,"metadata":{},"sourceType":"script"}