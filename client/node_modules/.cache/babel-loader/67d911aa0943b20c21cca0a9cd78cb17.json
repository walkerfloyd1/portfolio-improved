{"ast":null,"code":"import _slicedToArray from \"/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/src/webpages/Posts.js\";\nimport React, { Fragment, useEffect, useState } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../Components/social/redux/post';\nimport PostItem from '../Components/social/posts/PostItem';\nimport PostForm from '../Components/social/posts/PostForm';\nimport CommentItem from '../Components/social/post/CommentItem';\nimport Navbar from '../Components/Navbar';\nimport Footer from '../Components/Footer';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Grid from '@material-ui/core/Grid';\nimport Profiles from '../Components/social/profiles/Profiles'; // Make it so comments only show up if you click on Comments\n\nconst Posts = ({\n  getPosts,\n  post: {\n    posts,\n    loading\n  },\n  isAuthenticated\n}) => {\n  useEffect(() => {\n    getPosts();\n  }, [getPosts]);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 1),\n        displayComments = _useState2[0];\n\n  if (isAuthenticated) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      justify: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(PostForm, {\n      style: {\n        top: '50px',\n        position: 'fixed'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }), React.createElement(List, {\n      className: \"posts\",\n      style: {\n        marginTop: '0px',\n        position: \"fixed\",\n        top: '50px',\n        left: '50%',\n        width: '500px',\n        marginRight: '10%',\n        maxHeight: '600px',\n        overflow: 'auto'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"Community Feed\"), posts.map(post => React.createElement(ListItem, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(PostItem, {\n      key: post._id,\n      post: post,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), displayComments && React.createElement(\"div\", {\n      className: \"comments\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }, post.comments.map(comment => React.createElement(CommentItem, {\n      key: comment._id,\n      comment: comment,\n      postId: post._id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }))))))), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Connect\"), React.createElement(Grid, {\n      item: true,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Profiles, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }))), React.createElement(Footer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }));\n  } else {\n    return;\n    React.createElement(Redirect, {\n      to: \"/landing\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    });\n  }\n};\n\nPosts.propTypes = {\n  getPosts: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getPosts\n})(Posts);","map":{"version":3,"sources":["/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/src/webpages/Posts.js"],"names":["React","Fragment","useEffect","useState","Redirect","PropTypes","connect","getPosts","PostItem","PostForm","CommentItem","Navbar","Footer","List","ListItem","Grid","Profiles","Posts","post","posts","loading","isAuthenticated","displayComments","top","position","marginTop","left","width","marginRight","maxHeight","overflow","map","_id","comments","comment","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,QAAyB,iCAAzB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,QAAP,MAAqB,qCAArB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,OAAOC,QAAP,MAAqB,wCAArB,C,CAEA;;AAEA,MAAMC,KAAK,GAAG,CAAC;AACXV,EAAAA,QADW;AAEXW,EAAAA,IAAI,EAAE;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,GAFK;AAMXC,EAAAA;AANW,CAAD,KAOR;AACFnB,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,QAAQ;AACX,GAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;AADE,oBAOEJ,QAAQ,CAAC,KAAD,CAPV;AAAA;AAAA,QAMEmB,eANF;;AAUF,MAAID,eAAJ,EAAqB;AACjB,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAEI,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AACI,MAAA,SAAS,EAAC,QADd;AAEI,MAAA,OAAO,EAAC,QAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEI,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAE;AACbE,QAAAA,GAAG,EAAE,MADQ;AAEbC,QAAAA,QAAQ,EAAE;AAFG,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,EAMI,oBAAC,IAAD;AAAM,MAAA,SAAS,EAAC,OAAhB;AAAwB,MAAA,KAAK,EAAE;AAC/BC,QAAAA,SAAS,EAAE,KADoB;AAE/BD,QAAAA,QAAQ,EAAE,OAFqB;AAG/BD,QAAAA,GAAG,EAAE,MAH0B;AAI/BG,QAAAA,IAAI,EAAE,KAJyB;AAK/BC,QAAAA,KAAK,EAAE,OALwB;AAM/BC,QAAAA,WAAW,EAAE,KANkB;AAO/BC,QAAAA,SAAS,EAAE,OAPoB;AAQ/BC,QAAAA,QAAQ,EAAE;AARqB,OAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAVA,EAaCX,KAAK,CAACY,GAAN,CAAUb,IAAI,IACX,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,IAAI,CAACc,GAApB;AAAyB,MAAA,IAAI,EAAEd,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,EAECI,eAAe,IAChB;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKJ,IAAI,CAACe,QAAL,CAAcF,GAAd,CAAkBG,OAAO,IAC1B,oBAAC,WAAD;AAAa,MAAA,GAAG,EAAEA,OAAO,CAACF,GAA1B;AAA+B,MAAA,OAAO,EAAEE,OAAxC;AAAiD,MAAA,MAAM,EAAEhB,IAAI,CAACc,GAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADC,CADL,CAHA,CADH,CAbD,CANJ,CAHJ,EAmCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnCJ,EAsCI,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CAtCJ,CAFJ,EA4CI,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5CJ,CADJ;AA+CH,GAhDD,MAiDK;AACD;AACH,wBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACH;AACD,CAtED;;AAwEAf,KAAK,CAACkB,SAAN,GAAkB;AACd5B,EAAAA,QAAQ,EAAEF,SAAS,CAAC+B,IAAV,CAAeC,UADX;AAEdnB,EAAAA,IAAI,EAAEb,SAAS,CAACiC,MAAV,CAAiBD;AAFT,CAAlB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9BtB,EAAAA,IAAI,EAAEsB,KAAK,CAACtB;AADkB,CAAL,CAA7B;;AAIA,eAAeZ,OAAO,CAACiC,eAAD,EAAkB;AACpChC,EAAAA;AADoC,CAAlB,CAAP,CAEZU,KAFY,CAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react';\nimport { Redirect } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getPosts } from '../Components/social/redux/post';\nimport PostItem from '../Components/social/posts/PostItem';\nimport PostForm from '../Components/social/posts/PostForm';\nimport CommentItem from '../Components/social/post/CommentItem';\nimport Navbar from '../Components/Navbar';\nimport Footer from '../Components/Footer';\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\n\nimport Grid from '@material-ui/core/Grid';\n\nimport Profiles from '../Components/social/profiles/Profiles';\n\n// Make it so comments only show up if you click on Comments\n\nconst Posts = ({\n    getPosts,\n    post: {\n        posts,\n        loading\n    },\n    isAuthenticated\n}) => {\n    useEffect(() => {\n        getPosts();\n    }, [getPosts])\n\n    const [\n        displayComments,\n    ] = useState(false);\n\n\n    if (isAuthenticated) {\n        return (\n            <div>\n                <Navbar />\n                <Grid container\n                    direction=\"column\"\n                    justify=\"center\">\n                    <Grid item md={6}>\n                        \n                        <PostForm style={{\n                            top: '50px',\n                            position: 'fixed'\n                        }}/>\n                        <List className=\"posts\" style={{\n                        marginTop: '0px',\n                        position: \"fixed\",\n                        top: '50px',\n                        left: '50%',\n                        width: '500px',\n                        marginRight: '10%',\n                        maxHeight: '600px',\n                        overflow: 'auto'\n                    }}>\n                        <h1>\n                            Community Feed\n                        </h1>\n                        {posts.map(post => (\n                            <ListItem>\n                            <PostItem key={post._id} post={post} />\n                            {displayComments && \n                            <div className=\"comments\">\n                                {post.comments.map(comment => (\n                                <CommentItem key={comment._id} comment={comment} postId={post._id} />\n                                ))}\n                            </div> }\n                            </ListItem>\n                        ))}\n                    </List>\n                    </Grid>\n                    <h1>\n                        Connect\n                    </h1>\n                    <Grid item md={6}>\n                        <Profiles />\n                    </Grid>\n                </Grid>\n                <Footer />\n        </div>  )\n    }\n    else {\n        return\n     <Redirect to=\"/landing\" /> \n }\n}\n\nPosts.propTypes = {\n    getPosts: PropTypes.func.isRequired,\n    post: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    post: state.post\n})\n\nexport default connect(mapStateToProps, {\n    getPosts\n})(Posts)\n"]},"metadata":{},"sourceType":"module"}