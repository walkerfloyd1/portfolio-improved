{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Resource = require('./resource');\n\nvar Issue = require('./issue');\n\nvar Release = require('./release');\n\nvar Hook = require('./hook');\n\nvar Commit = require('./commit');\n\nvar Branch = require('./branch');\n\nvar GitRef = require('./git_ref');\n\nvar GitCommit = require('./git_commit');\n\nvar GitBlob = require('./git_blob');\n/**\n * Model to represent a a repository.\n * @type {Resource}\n */\n\n\nvar Repository = function (_Resource) {\n  _inherits(Repository, _Resource);\n\n  function Repository(client, github, id) {\n    _classCallCheck(this, Repository);\n\n    var _this = _possibleConstructorReturn(this, (Repository.__proto__ || Object.getPrototypeOf(Repository)).call(this, client));\n\n    _this.id = id;\n    return _this;\n  }\n  /**\n   * Return API endpoint for this application\n   */\n\n\n  _createClass(Repository, [{\n    key: 'url',\n    value: function url() {\n      var _get2;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(Repository.prototype.__proto__ || Object.getPrototypeOf(Repository.prototype), 'url', this)).call.apply(_get2, [this, 'repos/' + this.id].concat(args));\n    }\n    /**\n     * Resources\n     */\n\n  }, {\n    key: 'issue',\n    value: function issue(id) {\n      return this.resource(Issue, id);\n    }\n  }, {\n    key: 'release',\n    value: function release(id) {\n      return this.resource(Release, id);\n    }\n  }, {\n    key: 'hook',\n    value: function hook(id) {\n      return this.resource(Hook, id);\n    }\n  }, {\n    key: 'commit',\n    value: function commit(id) {\n      return this.resource(Commit, id);\n    }\n  }, {\n    key: 'branch',\n    value: function branch(id) {\n      return this.resource(Branch, id);\n    }\n  }, {\n    key: 'gitCommit',\n    value: function gitCommit(id) {\n      return this.resource(GitCommit, id);\n    }\n  }, {\n    key: 'gitRef',\n    value: function gitRef(id) {\n      return this.resource(GitRef, id);\n    }\n  }, {\n    key: 'gitBlob',\n    value: function gitBlob(id) {\n      return this.resource(GitBlob, id);\n    } // Get details about the repository\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.get('').get('body');\n    } // Return list of releases\n\n  }, {\n    key: 'releases',\n    value: function releases(opts) {\n      return this.page('releases', {}, opts);\n    } // Return list of issues\n\n  }, {\n    key: 'issues',\n    value: function issues(opts) {\n      return this.page('issues', {}, opts);\n    } // Return list of hooks\n\n  }, {\n    key: 'hooks',\n    value: function hooks(opts) {\n      return this.page('hooks', {}, opts);\n    } // Return list of branches\n    // https://developer.github.com/v3/repos/#list-branches\n\n  }, {\n    key: 'branches',\n    value: function branches(opts) {\n      return this.page('branches', {}, opts);\n    } // List Tags\n    // https://developer.github.com/v3/repos/#list-tags\n\n  }, {\n    key: 'tags',\n    value: function tags(opts) {\n      return this.page('tags', {}, opts);\n    } // Compare two commits\n    // https://developer.github.com/v3/repos/commits/#compare-two-commits\n\n  }, {\n    key: 'compare',\n    value: function compare(base, head) {\n      return this.get('compare/' + base + '...' + head).get('body');\n    } // Perform a merge\n    // https://developer.github.com/v3/repos/merging/\n\n  }, {\n    key: 'merge',\n    value: function merge(params) {\n      return this.client.post(this.url('merges'), params).get('body');\n    } // Create a new release\n\n  }, {\n    key: 'createRelease',\n    value: function createRelease(params) {\n      return this.client.post(this.url('releases'), params).get('body');\n    } // Create an issue\n\n  }, {\n    key: 'createIssue',\n    value: function createIssue(params) {\n      return this.client.post(this.url('issues'), params).get('body');\n    } // Create a hook\n    // https://developer.github.com/v3/repos/hooks/#create-a-hook\n\n  }, {\n    key: 'createHook',\n    value: function createHook(params) {\n      return this.client.post(this.url('hooks'), params).get('body');\n    } // Create a status\n    // https://developer.github.com/v3/repos/statuses/#create-a-status\n\n  }, {\n    key: 'createStatus',\n    value: function createStatus(sha, params) {\n      return this.client.post(this.url('statuses', sha), params).get('body');\n    } // Remove the repository\n\n  }, {\n    key: 'destroy',\n    value: function destroy() {\n      return this.del('');\n    }\n  }]);\n\n  return Repository;\n}(Resource);\n\nmodule.exports = Repository;","map":null,"metadata":{},"sourceType":"script"}