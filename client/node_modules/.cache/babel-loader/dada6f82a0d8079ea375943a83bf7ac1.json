{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Resource = require('./resource');\n/**\n * Resource to model a git branch.\n * https://developer.github.com/v3/repos/\n *\n * @type {Resource}\n */\n\n\nvar Branch = function (_Resource) {\n  _inherits(Branch, _Resource);\n\n  function Branch(client, repo, ref) {\n    _classCallCheck(this, Branch);\n\n    var _this = _possibleConstructorReturn(this, (Branch.__proto__ || Object.getPrototypeOf(Branch)).call(this, client));\n\n    _this.repo = repo;\n    _this.ref = ref;\n    return _this;\n  }\n  /**\n   * Return API endpoint for this branch\n   */\n\n\n  _createClass(Branch, [{\n    key: 'url',\n    value: function url() {\n      var _repo;\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_repo = this.repo).url.apply(_repo, ['branches/' + this.ref].concat(args));\n    }\n    /**\n     * Get details about the branch\n     * https://developer.github.com/v3/repos/#get-branch\n     * @return {Promise<JSON>}\n     */\n\n  }, {\n    key: 'info',\n    value: function info() {\n      return this.get('').get('body');\n    }\n  }]);\n\n  return Branch;\n}(Resource);\n\nmodule.exports = Branch;","map":null,"metadata":{},"sourceType":"script"}