{"ast":null,"code":"import axios from 'axios';\nimport { setAlert } from './alert';\nimport { GET_POSTS, POST_ERROR, UPDATE_LIKES, DELETE_POST, ADD_POST, GET_POST, ADD_COMMENT, REMOVE_COMMENT } from './types'; // getting posts\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const res = await axios.get('/api/posts');\n    dispatch({\n      type: GET_POSTS,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response,\n        status: error.response.sendstatus\n      }\n    });\n  }\n}; //adding like\n\nexport const addLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/like/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //Removelike\n\nexport const removeLike = id => async dispatch => {\n  try {\n    const res = await axios.put(\"/api/posts/unlike/\".concat(id));\n    dispatch({\n      type: UPDATE_LIKES,\n      payload: {\n        id,\n        likes: res.data\n      }\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //DELETE POST\n\nexport const deletePost = id => async dispatch => {\n  try {\n    await axios.delete(\"/api/posts/\".concat(id));\n    dispatch({\n      type: DELETE_POST,\n      payload: id\n    });\n    dispatch(setAlert('Post deleted', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //ADD POST\n\nexport const addPost = formData => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post('/api/posts/', formData, config);\n    dispatch({\n      type: ADD_POST,\n      payload: res.data\n    });\n    dispatch(setAlert('Post created', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};\nexport const getPost = id => async dispatch => {\n  try {\n    const res = await axios.get(\"/api/posts/\".concat(id));\n    dispatch({\n      type: GET_POST,\n      payload: res.data\n    });\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //ADD COMMENT\n\nexport const addComment = (postId, formData) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  try {\n    const res = await axios.post(\"/api/posts/comment/\".concat(postId), formData, config);\n    dispatch({\n      type: ADD_COMMENT,\n      payload: res.data\n    });\n    dispatch(setAlert('Comment added', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n}; //DELETE COMMENT\n\nexport const deleteComment = (postId, commentId) => async dispatch => {\n  try {\n    const res = await axios.delete(\"/api/posts/comment/\".concat(postId, \"/\").concat(commentId));\n    dispatch({\n      type: REMOVE_COMMENT,\n      payload: commentId\n    });\n    dispatch(setAlert('Comment removed', 'success'));\n  } catch (error) {\n    dispatch({\n      type: POST_ERROR,\n      payload: {\n        msg: error.response.statusText,\n        status: error.response.status\n      }\n    });\n  }\n};","map":{"version":3,"sources":["/Users/walkerfloyd/Desktop/Web-Development/my-new-portfolio/client/src/Components/social/redux/post.js"],"names":["axios","setAlert","GET_POSTS","POST_ERROR","UPDATE_LIKES","DELETE_POST","ADD_POST","GET_POST","ADD_COMMENT","REMOVE_COMMENT","getPosts","dispatch","res","get","type","payload","data","error","msg","response","status","sendstatus","addLike","id","put","likes","statusText","removeLike","deletePost","delete","addPost","formData","config","headers","post","getPost","addComment","postId","deleteComment","commentId"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { setAlert } from './alert';\nimport {\n    GET_POSTS,\n    POST_ERROR,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    GET_POST,\n    ADD_COMMENT,\n    REMOVE_COMMENT\n} from './types';\n\n// getting posts\n\nexport const getPosts = () => async dispatch => {\n    try {\n        \n        const res = await axios.get('/api/posts');\n\n        dispatch({\n            type: GET_POSTS,\n            payload: res.data\n        });\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { \n                msg: error.response,\n                status: error.response.sendstatus \n            }\n        })\n    }\n}\n\n//adding like\n\nexport const addLike = id => async dispatch => {\n    try {\n        const res = await axios.put(`/api/posts/like/${id}`);\n\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: {\n                id,\n                likes: res.data\n            }\n        });\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//Removelike\n\nexport const removeLike = id => async dispatch => {\n    try {\n        const res = await axios.put(`/api/posts/unlike/${id}`);\n\n        dispatch({\n            type: UPDATE_LIKES,\n            payload: {\n                id,\n                likes: res.data\n            }\n        });\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//DELETE POST\n\nexport const deletePost = id => async dispatch => {\n    try {\n        await axios.delete(`/api/posts/${id}`);\n\n        dispatch({\n            type: DELETE_POST,\n            payload: id\n        });\n\n        dispatch(setAlert('Post deleted', 'success'))\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//ADD POST\n\nexport const addPost = formData => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    try {\n        const res = await axios.post('/api/posts/', formData, config);\n\n        dispatch({\n            type: ADD_POST,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Post created', 'success'))\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\nexport const getPost = id => async dispatch => {\n    try {\n        const res = await axios.get(`/api/posts/${id}`);\n\n        dispatch({\n            type: GET_POST,\n            payload: res.data\n        });\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//ADD COMMENT\n\nexport const addComment = (postId, formData ) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    try {\n        const res = await axios.post(`/api/posts/comment/${postId}`, formData, config);\n\n        dispatch({\n            type: ADD_COMMENT,\n            payload: res.data\n        });\n\n        dispatch(setAlert('Comment added', 'success'))\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}\n\n//DELETE COMMENT\n\nexport const deleteComment = (postId, commentId ) => async dispatch => {\n    \n    try {\n        const res = await axios.delete(`/api/posts/comment/${postId}/${commentId}`);\n\n        dispatch({\n            type: REMOVE_COMMENT,\n            payload: commentId\n        });\n\n        dispatch(setAlert('Comment removed', 'success'))\n    } catch (error) {\n        dispatch({\n            type: POST_ERROR,\n            payload: { msg: error.response.statusText,\n            status: error.response.status }\n        })\n    }\n}"]},"metadata":{},"sourceType":"module"}